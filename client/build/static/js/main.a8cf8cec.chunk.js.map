{"version":3,"sources":["context/auth.context.js","pages/AuthPage.js","hooks/message.hook.js","hooks/http.hook.js","components/Navbar.js","App.js","hooks/auth.hook.js","rotes.js","serviceWorker.js","index.js"],"names":["noop","AuthContext","createContext","token","userId","ALLusers","login","logout","isAuthenticated","userIsBlocked","userIsDeleted","deletedUsers","AuthPage","auth","useContext","message","useCallback","text","window","M","toast","html","useState","loading","setLoading","error","setError","request","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","clearError","useHttp","date","Date","password","email","dataLogin","form","setForm","useEffect","updateTextFields","changeHandler","event","target","name","value","registerHandler","loginHandler","className","htmlFor","placeholder","id","type","onChange","role","aria-label","disabled","onClick","Navbar","database","options","onDeleteRow","rows","indexOf","del","alert","preventDefault","deleteRow","selectRow","mode","bgColor","dataField","isKey","width","App","setToken","ready","setReady","setUserId","setUserIsBlocked","setUserIsDeleted","setUsers","setDeletedUsers","jwtToken","users","isBlocked","isDeleted","DeletedUsers","localStorage","setItem","removeItem","parse","getItem","data1","useAuth","routes","path","exact","to","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a8cf8cec.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n  token: null,\r\n  userId: null,\r\n  ALLusers: null,\r\n  login: noop,\r\n  logout: noop,\r\n  isAuthenticated: false,\r\n  userIsBlocked: false,\r\n  userIsDeleted: false,\r\n  deletedUsers:null\r\n})","import React, { useContext, useEffect, useState } from 'react'\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { useMessage } from '../hooks/message.hook'\r\nimport { AuthContext } from '../context/auth.context'\r\n\r\n\r\nexport const AuthPage = () => {\r\n  const auth = useContext(AuthContext)\r\n  const message = useMessage()\r\n  const { loading, request, error, clearError } = useHttp()\r\n  const date = new Date()\r\n  const [form, setForm] = useState({\r\n    login: '', password: '', email: '', userIsDeleted : false, deletedUsers:[],userIsBlocked:false,dataLogin: date\r\n    })\r\n\r\n  useEffect(() => {\r\n    message(error)\r\n    clearError()\r\n  }, [error, message, clearError])\r\n\r\n  useEffect(() => {\r\n    window.M.updateTextFields()\r\n  }, [])\r\n\r\n  const changeHandler = event => {\r\n    setForm({ ...form, [event.target.name]: event.target.value ,\r\n      userIsDeleted : auth.userIsDeleted,\r\n      deletedUsers: auth.deletedUsers\r\n    })\r\n  }\r\n\r\n  const registerHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/register', 'POST', { ...form })\r\n      message(data.message)\r\n    } catch (e) { }\r\n  }\r\n\r\n  const loginHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/login', 'POST', { ...form})\r\n      auth.login(data.token, data.userId, data.ALLusers, data.userIsBlocked,data.userIsDeleted, data.deletedUsers,data.dataLogin)\r\n    } catch (e) { }\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div>\r\n        <h1>Авторизация</h1>\r\n        <div >\r\n          <div>\r\n            <form>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\" >Email:</label>\r\n                <div>\r\n                <input //className=\"form-control\"\r\n                  placeholder=\"Введите email\"\r\n                  id=\"email\"\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                 \r\n                  value={form.email}\r\n                  onChange={changeHandler}\r\n                  \r\n                />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\">Логин: </label>\r\n                <div>\r\n                <input\r\n               // className=\"form-control\"\r\n                  placeholder=\"Введите логин\"\r\n                  id=\"login\"\r\n                  type=\"text\"\r\n                  name=\"login\"\r\n                 \r\n                  value={form.login}\r\n                  onChange={changeHandler}\r\n                />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"email\">Пароль: </label>\r\n                <div>\r\n                <input\r\n                  //className=\"form-control\"\r\n                  \r\n                  placeholder=\"Введите пароль\"\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n          \r\n                  value={form.password}\r\n                  onChange={changeHandler}\r\n                />\r\n          \r\n              </div>\r\n             </div>\r\n            </form>\r\n\r\n          </div>\r\n\r\n          <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n            <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\r\n              <button type=\"button\" className=\"btn btn-secondary\" disabled={loading} onClick={loginHandler} > Войти</button>\r\n              <button type=\"button\" className=\"btn btn-secondary\" disabled={loading} onClick={registerHandler} >Регистрация</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import {useCallback} from 'react'\r\n\r\nexport const useMessage = () =>{\r\n    return useCallback( text=>{\r\n        if(window.M && text){\r\n            window.M.toast({html:text})\r\n        }\r\n    }, [])\r\n}","import { useState, useCallback } from 'react'\r\n\r\nexport const useHttp = ()=>{\r\n    const [loading, setLoading]= useState(false)\r\n    const [error, setError]= useState(null)\r\n    const request = useCallback(async (url, method='GET', body = null, headers ={}) =>{\r\n        setLoading(true)\r\n        try {\r\n            if(body){\r\n                body = JSON.stringify(body)\r\n                headers['Content-type']='application/json'\r\n            }\r\n            const response = await fetch(url,{method,body,headers})\r\n            const data = await response.json()\r\n            if(!response.ok){\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e \r\n        }\r\n    },[])\r\n    const clearError = useCallback(() =>setError(null),[])\r\n    return {loading,request,error,clearError}\r\n}","import React, { useContext} from 'react'\r\nimport { AuthContext } from '../context/auth.context'\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\n\r\n\r\nexport const Navbar = () => {\r\n  const auth = useContext(AuthContext)\r\n  const database = auth.ALLusers\r\n  /*const createCustomInsertButton = () =>{\r\n    return(\r\n      <DeleteButton style={ { color: 'black' }} afterDeleteRow = {afterDeleteRow}>Удалить пользователя</DeleteButton>\r\n    )\r\n  }\r\n  */\r\n\r\n  function afterDeleteRow(rows) {\r\n    if (rows.indexOf(auth.userId, 0) !== -1){\r\n        auth.del()\r\n    }\r\n  }\r\n\r\n  function onBlock () {\r\n    alert(\"Сегодня все под защитой сильнейшего дракона Эрнеста, но можешь попытаться удалить кого-то... \")\r\n  }\r\n\r\n  function unBlock() {\r\n    alert(\"Спасиюо, что помогаешь бороться с преступностью!\")\r\n  }\r\n  const options = {\r\n    onDeleteRow: afterDeleteRow,\r\n  }\r\n  const selectRowProp ={\r\n    mode: \"checkbox\",\r\n    bgColor: 'red',\r\n  }\r\n  const logoutHandler = event => {\r\n    alert(\"Как жаль расстоваться(((\")\r\n    event.preventDefault()\r\n    auth.logout()\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n        <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\r\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={onBlock}>Заблокировать</button>\r\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={unBlock}>Разблокировать</button>\r\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={logoutHandler }>Выйти с аккаунта</button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <BootstrapTable data={database}  deleteRow={true} selectRow={selectRowProp} options={options} >\r\n          <TableHeaderColumn dataField=\"_id\" isKey={true} width=\"30%\">ID</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"dataRegistration\" width=\"40%\">Дата регистрации</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"login\" width=\"25%\">Логин</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"email\" width=\"25%\">Электронная почта</TableHeaderColumn>\r\n        </BootstrapTable>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport 'materialize-css'\nimport { useRoutes } from './rotes'\nimport { useAuth } from './hooks/auth.hook'\nimport { AuthContext } from './context/auth.context'\nimport { Navbar } from './components/Navbar'\n\nfunction App() {\n  const { token, login, logout,del, userId, ALLusers, userIsDeleted,userIsBlocked, deletedUsers } = useAuth()\n  const isAuthenticated = !!token\n  const routes = useRoutes(isAuthenticated)\n  return (\n    <AuthContext.Provider value ={{\n      token, login, logout, userId, isAuthenticated, ALLusers,userIsDeleted,userIsBlocked,del,deletedUsers\n    }}>\n      <Router>\n        {isAuthenticated && <Navbar />}\n        <div className=\"container\">\n          {routes}\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\nexport default App\n","import {useState, useCallback, useEffect} from 'react'\r\n\r\nconst storageName = 'userData'\r\nconst storageName1 = 'delete'\r\nexport const useAuth = () => {\r\n  const [token, setToken] = useState(null)\r\n  const [ready, setReady] = useState(false)\r\n  const [userId, setUserId] = useState(null)\r\n  const [userIsBlocked, setUserIsBlocked] = useState(false)\r\n  const [userIsDeleted, setUserIsDeleted] = useState(false)\r\n  const [ALLusers, setUsers] = useState(null)\r\n  const [deletedUsers, setDeletedUsers] = useState(null)\r\n\r\n  const login = useCallback((jwtToken, id,users,isBlocked,isDeleted,DeletedUsers) => {\r\n    setToken(jwtToken)\r\n    setUserIsBlocked(isBlocked)\r\n    setUserIsDeleted(isDeleted)\r\n    setDeletedUsers(DeletedUsers)\r\n    setUsers(users)\r\n    setUserId(id)\r\n    localStorage.setItem(storageName, JSON.stringify({\r\n      userId: id, token: jwtToken, ALLusers:users\r\n    }))\r\n    localStorage.setItem(storageName1, JSON.stringify({\r\n    userIsBlocked:isBlocked, userIsDeleted:isDeleted, deletedUsers: DeletedUsers\r\n    }))\r\n  }, [])\r\n\r\n  const logout = useCallback(() => {\r\n    setToken(null)\r\n    setUserId(null)\r\n    localStorage.removeItem(storageName)\r\n  }, [])\r\n \r\n  const del = useCallback(() => {\r\n    setUserIsDeleted(true)\r\n    setToken(null)\r\n    localStorage.removeItem(storageName)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(storageName))\r\n    const data1 = JSON.parse(localStorage.getItem(storageName1))\r\n    if (data && data.token) {\r\n      login(data.token, data.userId, data.ALLusers, data1.userIsDeleted,data1.deletedUsers)\r\n    }\r\n\r\n    setReady(true)\r\n  }, [login])\r\n\r\n  return { login, logout, del, token, userId,ready, ALLusers,userIsBlocked, userIsDeleted, deletedUsers}\r\n}","\r\nimport React from 'react'\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport {AuthPage} from './pages/AuthPage'\r\nexport const useRoutes = isAuthenticated => {\r\n  if (isAuthenticated) {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/table\" exact></Route>\r\n        <Redirect to=\"/table\" />\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact>\r\n        <AuthPage />\r\n      </Route>\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import  'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}